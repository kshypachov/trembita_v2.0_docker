#!/bin/bash
set -e

#export PGHOST = postgres
#export PGPORT = 5432

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É db.properties
DB_PROPERTIES="/etc/uxp/db.properties"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ db.properties
get_value() {
    grep -E "^$1\s*=" "$DB_PROPERTIES" | cut -d'=' -f2- | xargs
}

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export PGHOST=$(get_value "serverconf.hibernate.connection.url" | sed -E 's|jdbc:postgresql://([^:/]+):([0-9]+)/.*|\1|')
export PGPORT=$(get_value "serverconf.hibernate.connection.url" | sed -E 's|jdbc:postgresql://([^:/]+):([0-9]+)/.*|\2|')

# Root-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ, –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
#export PGROOT_USER="postgres"
#export PGROOT_PASSWORD="<–∑–∞–ø–æ–ª–Ω–∏_–≤—Ä—É—á–Ω—É—é_–∏–ª–∏_–∏–∑_—Å–µ–∫—Ä–µ—Ç–∞>"

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø–∞—Ä–æ–ª–∏
export SERVERCONF_DB_USER=$(get_value "serverconf.hibernate.connection.username")
export SERVERCONF_DB_PASS=$(get_value "serverconf.hibernate.connection.password")

export MESSAGELOG_DB_USER=$(get_value "messagelog-metadata.hibernate.connection.username")
export MESSAGELOG_DB_PASS=$(get_value "messagelog-metadata.hibernate.connection.password")

export IDENTITY_DB_USER=$(get_value "identity-provider.hibernate.connection.username")
export IDENTITY_DB_PASS=$(get_value "identity-provider.hibernate.connection.password")

export OPMONITOR_DB_USER=$(get_value "op-monitor.hibernate.connection.username")
export OPMONITOR_DB_PASS=$(get_value "op-monitor.hibernate.connection.password")

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É db.monitor-admin
DB_PROPERTIES="/etc/uxp/db.monitor-admin"

# –ê–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è op-monitor ‚Äî –≤ —Ñ–∞–π–ª–µ –Ω–µ –∑–∞–¥–∞–Ω
export OPMONITOR_ADMIN_DB_USER=$(get_value "op-monitor-admin.username")
export OPMONITOR_ADMIN_DB_PASS=$(get_value "op-monitor-admin.password")

# –í—ã–≤–æ–¥ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
echo "PGHOST=$PGHOST"
echo "PGPORT=$PGPORT"
echo "PGROOT_USER=$PGROOT_USER"
echo "PGROOT_PASSWORD=$PGROOT_PASSWORD"
echo "SERVERCONF_DB_USER=$SERVERCONF_DB_USER"
echo "SERVERCONF_DB_PASS=$SERVERCONF_DB_PASS"
echo "MESSAGELOG_DB_USER=$MESSAGELOG_DB_USER"
echo "MESSAGELOG_DB_PASS=$MESSAGELOG_DB_PASS"
echo "IDENTITY_DB_USER=$IDENTITY_DB_USER"
echo "IDENTITY_DB_PASS=$IDENTITY_DB_PASS"
echo "OPMONITOR_DB_USER=$OPMONITOR_DB_USER"
echo "OPMONITOR_DB_PASS=$OPMONITOR_DB_PASS"
echo "OPMONITOR_ADMIN_DB_USER=$OPMONITOR_ADMIN_DB_USER"
echo "OPMONITOR_ADMIN_DB_PASS=$OPMONITOR_ADMIN_DB_PASS"


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REQUIRED_VARS=(
  PGHOST PGPORT PGROOT_USER PGROOT_PASSWORD
  SERVERCONF_DB_USER SERVERCONF_DB_PASS
  MESSAGELOG_DB_USER MESSAGELOG_DB_PASS
  IDENTITY_DB_USER IDENTITY_DB_PASS
  OPMONITOR_DB_USER OPMONITOR_DB_PASS
  OPMONITOR_ADMIN_DB_USER OPMONITOR_ADMIN_DB_PASS
)

echo "üîç Checking required environment variables..."
for VAR in "${REQUIRED_VARS[@]}"; do
  if [[ -z "${!VAR}" ]]; then
    echo "‚ùå ERROR: Required environment variable $VAR is not set"
    exit 1
  fi
done

# –ñ–¥—ë–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PostgreSQL
echo "‚åõ Waiting for PostgreSQL to become available at $PGHOST:$PGPORT..."

for i in {1..60}; do
  if pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGROOT_USER" >/dev/null 2>&1; then
    echo "‚úÖ PostgreSQL is ready"
    break
  fi
  echo "‚è≥ PostgreSQL not ready yet... ($i/60)"
  sleep 2
done

# –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –µ—Å–ª–∏ –∑–∞ 120 —Å–µ–∫ –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω
if ! pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGROOT_USER"; then
  echo "‚ùå PostgreSQL is still not available after timeout. Exiting."
  exit 1
fi

echo "‚úÖ All required environment variables are present."
export PGPASSWORD="$PGROOT_PASSWORD"

# –°–ø–∏—Å–æ–∫ –±–∞–∑, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–∞—Ä–æ–ª–µ–π
declare -A DBS=(
  [serverconf]="${SERVERCONF_DB_USER}:${SERVERCONF_DB_PASS}"
  [messagelog-metadata]="${MESSAGELOG_DB_USER}:${MESSAGELOG_DB_PASS}"
  [identity-provider]="${IDENTITY_DB_USER}:${IDENTITY_DB_PASS}"
  [op-monitor]="${OPMONITOR_DB_USER}:${OPMONITOR_DB_PASS}"
)

echo "üîß Creating user '$OPMONITOR_DB_USER'"
psql -h "$PGHOST" -p "$PGPORT" -U "$PGROOT_USER" -c \
      "CREATE ROLE \"$OPMONITOR_ADMIN_DB_USER\" LOGIN PASSWORD '$OPMONITOR_ADMIN_DB_PASS';" # –∫–æ—Å—Ç—ã–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

# –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
for DB in "${!DBS[@]}"; do
  USER_PASS="${DBS[$DB]}"
  USER="${USER_PASS%%:*}"
  PASS="${USER_PASS##*:}"

  echo "üîß Creating user '$USER'"

  # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  USER_EXISTS=$(psql -h "$PGHOST" -p "$PGPORT" -U "$PGROOT_USER" -tAc \
    "SELECT 1 FROM pg_roles WHERE rolname = '$USER';")

  if [ "$USER_EXISTS" != "1" ]; then
    echo "‚ûï Creating user '$USER'..."
    psql -h "$PGHOST" -p "$PGPORT" -U "$PGROOT_USER" -c \
      "CREATE ROLE \"$USER\" LOGIN PASSWORD '$PASS';"
  else
    echo "‚úîÔ∏è User '$USER' already exists."
  fi
done


# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
for DB in "${!DBS[@]}"; do
  USER_PASS="${DBS[$DB]}"
  USER="${USER_PASS%%:*}"
  PASS="${USER_PASS##*:}"

  DB_EXISTS=$(psql -h "$PGHOST" -p "$PGPORT" -U "$PGROOT_USER" -tAc "SELECT 1 FROM pg_database WHERE datname = '$DB'")
  if [ "$DB_EXISTS" != "1" ]; then
    echo "üì¶ Creating database $DB..."
    psql -h "$PGHOST" -p "$PGPORT" -U "$PGROOT_USER" -c "CREATE DATABASE \"$DB\" OWNER $USER;"
  fi
done

# –ò–º–ø–æ—Ä—Ç SQL –¥–∞–º–ø–æ–≤
echo "‚¨áÔ∏è Importing SQL dumps..."

PGPASSWORD="$PGROOT_PASSWORD" psql -h "$PGHOST" -p "$PGPORT" -U "$PGROOT_USER" -d serverconf < /serverconf.sql
PGPASSWORD="$PGROOT_PASSWORD" psql -h "$PGHOST" -p "$PGPORT" -U "$PGROOT_USER" -d messagelog-metadata < /messagelog-metadata.sql
PGPASSWORD="$PGROOT_PASSWORD" psql -h "$PGHOST" -p "$PGPORT" -U "$PGROOT_USER" -d identity-provider < /identity-provider.sql
PGPASSWORD="$PGROOT_PASSWORD" psql -h "$PGHOST" -p "$PGPORT" -U "$PGROOT_USER" -d op-monitor < /op-monitor.sql

echo "‚úÖ All databases initialized successfully."