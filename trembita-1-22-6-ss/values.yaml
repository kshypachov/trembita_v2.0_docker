# Default values for trembita-1-22-6-ss.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: kshypachov/trembita_ss_v1.22.6
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v1.0.1"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

cloudPostgresDatabase:
  enabled: true

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
services:
  external:
    enabled: true
    type: LoadBalancer
    ports:
      - name: port5500
        port: 5500
        targetPort: 5500

  internal:
    enabled: true
    type: ClusterIP
    ports:
      - name: web-ui
        port: 4000
        targetPort: 4000
      - name: secure-api
        port: 80
        targetPort: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

postgresql_init:
  initJob:
    containerImageName: kshypachov/trembita_ss_v1.22.6-pg-init
    containerImageVer: v1.0.5

    env:
#      - name: PGHOST
#        value: uxp-postgres
      - name: PGPORT
        value: 5432
      - name: PGROOT_USER
        value: postgres
      - name: PGROOT_PASSWORD
        value: mysecretpassword
      - name: SERVERCONF_DB_USER
        value: serverconf
      - name: SERVERCONF_DB_PASS
        value: serverconfp
      - name: MESSAGELOG_DB_USER
        value: messagelog
      - name: MESSAGELOG_DB_PASS
        value: messagelogp
      - name: IDENTITY_DB_USER
        value: identityprovider
      - name: IDENTITY_DB_PASS
        value: identityproviderp
      - name: OPMONITOR_DB_USER
        value: opmonitor
      - name: OPMONITOR_DB_PASS
        value: opmonitorp
      - name: OPMONITOR_ADMIN_DB_USER
        value: opmonitor_admin
      - name: OPMONITOR_ADMIN_DB_PASS
        value: opmonitor_adminp

postgresql:
  containerName: postgres
  image: postgres:16
  username: postgres
  password: mysecretpassword
  database: appdb
  port: 5432

  persistence:
    enabled: true
    size: 1Gi
    storageClass: ""

  env:
    - name: PGDATA
      value: /var/lib/postgresql/data/pgdata
    - name: POSTGRES_USER
      value: postgres
    - name: POSTGRES_PASSWORD
      value: mysecretpassword
    - name: POSTGRES_DB
      value: appdb
