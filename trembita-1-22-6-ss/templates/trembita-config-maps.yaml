{{- with .Values.trembita_config.configMaps}}
{{- if and .enabled .local_ini.enabled}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .local_ini.name}}
data:
  {{ default "local.ini" .local_ini.subPath}}: |
    [identity-provider]
    security-server-client-id = 60997vl7jlgoi53zbyvv2k9iyny1rae2
    security-server-client-secret = QTK3fBuPu0v0m2DpvEees0AODujEcX3V
    public-client-redirect-uris= https://trembita2.local
    hostname=trembita2.local


    [message-log]
    archive-storage-type = fs
{{- end}}
{{- end}}

------

{{- with .Values.trembita_config.configMaps}}
{{- if and .enabled .default_uxp.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .default_uxp.name }}
data:
  {{ default "uxp-default" .default_uxp.subPath}}: |
    server {
      listen 4000;

      location /test {
          return 200 "OK - nginx is working\n";
          add_header Content-Type text/plain;
      }

      # Deny all hidden file requests
      location ~ /\. {
        deny all;
        return 404;
      }

      # Include general headers. This is explicitly defined here, because directives are not inherited
      # from the previous levels if "add_header" is defined in the current level. And uxp-*-headers
      # contains "add_header".
      include conf.d/uxp-headers.include;

      # Include component specific headers
      include conf.d/uxp-*-headers.include;

      # Include UXP locations
      include conf.d/uxp-*-location.include;
    }

{{- end }}
{{- end }}

------

{{- with .Values.trembita_config.configMaps}}
{{- if and .enabled .uxp_identity_provider_rest_api.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .uxp_identity_provider_rest_api.name }}
data:
  {{default "uxp-identity-provider-rest-api-location.include" .uxp_identity_provider_rest_api.subPath}}: |
    # Identity Provider backend location.
    location /auth-api {
      proxy_pass http://127.0.0.1:8087;
    #  proxy_set_header Host $host:$server_port;
    #  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #  proxy_set_header X-Forwarded-Proto https;
    #  proxy_set_header X-Forwarded-Port $server_port;
    #  proxy_redirect http:// https://;
      client_max_body_size 5M;

      location ~* oauth2-redirect.html$ {
        proxy_pass http://127.0.0.1:8087;
    #    proxy_set_header Host $host:$server_port;
    #    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #    proxy_set_header X-Forwarded-Proto https;
    #    proxy_set_header X-Forwarded-Port $server_port;
    #    proxy_redirect http:// https://;
    #    client_max_body_size 5M;
        add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; frame-ancestors 'self'; script-src 'self' 'unsafe-inline';" always;
      }
    }

{{- end }}
{{- end}}

------

{{- with .Values.trembita_config.configMaps}}
{{- if and .enabled .uxp_securityserver_rest_api.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .uxp_securityserver_rest_api.name}}
data:
  {{default "uxp-securityserver-rest-api-location.include" .uxp_securityserver_rest_api.subPath}}: |
    # REST API location.
      location /api {
        proxy_pass http://127.0.0.1:8085;
        #proxy_set_header Host $host:$server_port;
        #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #proxy_set_header X-Forwarded-Proto https;
        #proxy_set_header X-Forwarded-Port $server_port;
        #proxy_redirect http:// https://;
        #client_max_body_size 5M;

        location ~* oauth2-redirect.html$ {
          proxy_pass http://127.0.0.1:8085;
          #proxy_set_header Host $host:$server_port;
          #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          #proxy_set_header X-Forwarded-Proto https;
          #proxy_set_header X-Forwarded-Port $server_port;
          #proxy_redirect http:// https://;
          #client_max_body_size 5M;
          add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; frame-ancestors 'self'; script-src 'self' 'unsafe-inline';" always;
        }
      }
{{- end}}
{{- end}}

------

{{- with .Values.trembita_config.configMaps}}
{{- if and .enabled .db_properties.enabled}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .db_properties.name}}
data:
  {{default "db.properties" .db_properties.subPath}}: |
    serverconf.hibernate.jdbc.use_streams_for_binary = true
    serverconf.hibernate.connection.driver_class = org.postgresql.Driver
    serverconf.hibernate.connection.url = jdbc:postgresql://{{ include "trembita-1-22-6-ss.fullname" $  }}-postgres:5432/serverconf
    serverconf.hibernate.connection.username = {{ $.Values.trembita_config.ss_to_db_access.SERVERCONF_DB_USER }}
    serverconf.hibernate.connection.password = {{ $.Values.trembita_config.ss_to_db_access.SERVERCONF_DB_PASS }}
    messagelog-metadata.hibernate.connection.driver_class = org.postgresql.Driver
    messagelog-metadata.hibernate.connection.url = jdbc:postgresql://{{ include "trembita-1-22-6-ss.fullname" $  }}-postgres:5432/messagelog-metadata
    messagelog-metadata.hibernate.connection.username = {{ $.Values.trembita_config.ss_to_db_access.MESSAGELOG_DB_USER }}
    messagelog-metadata.hibernate.connection.password = {{ $.Values.trembita_config.ss_to_db_access.MESSAGELOG_DB_PASS }}
    identity-provider.hibernate.connection.driver_class = org.postgresql.Driver
    identity-provider.hibernate.connection.url = jdbc:postgresql://{{ include "trembita-1-22-6-ss.fullname" $  }}-postgres:5432/identity-provider
    identity-provider.hibernate.connection.username = {{ $.Values.trembita_config.ss_to_db_access.IDENTITY_DB_USER }}
    identity-provider.hibernate.connection.password = {{ $.Values.trembita_config.ss_to_db_access.IDENTITY_DB_PASS }}
    op-monitor.hibernate.jdbc.use_streams_for_binary = true
    op-monitor.hibernate.connection.driver_class = org.postgresql.Driver
    op-monitor.hibernate.jdbc.batch_size = 50
    op-monitor.hibernate.connection.url = jdbc:postgresql://{{ include "trembita-1-22-6-ss.fullname" $  }}-postgres:5432/op-monitor
    op-monitor.hibernate.connection.username = {{ $.Values.trembita_config.ss_to_db_access.OPMONITOR_DB_USER }}
    op-monitor.hibernate.connection.password = {{ $.Values.trembita_config.ss_to_db_access.OPMONITOR_DB_PASS }}
{{- end}}
{{- end}}

------

{{- with .Values.trembita_config.configMaps}}
{{- if and .enabled .tokens_autologin.enabled}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .tokens_autologin.name }}
data: {{ default "tokens-autologin.py" .tokens_autologin.subPath }}: |
        import os
        import time
        import base64
        import hashlib
        import requests
        import urllib3

        # Disable self-signed certificate warnings
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

        # === Read environment variables ===
        USERNAME = os.environ.get("USERNAME", "")
        PASSWORD = os.environ.get("PASSWORD", "")
        REDIRECT_URI = os.environ.get("REDIRECT_URI", "")
        CLIENT_ID = os.environ.get("CLIENT_ID", "uxp-ss-ui")
        SECURITY_SERVER_ADDRESS = os.environ.get("SECURITY_SERVER_ADDRESS", "https://127.0.0.1:4000")
        TOKEN_CREDENTIALS = os.environ.get("TOKEN_CREDENTIALS", "")  # Format: "0:1234,1:5678"
        MAX_RETRIES = int(os.environ.get("OAUTH_RETRIES", "3"))

        # === Clear sensitive environment variables ===
        for var in [
            "USERNAME", "PASSWORD", "REDIRECT_URI", "CLIENT_ID",
            "SECURITY_SERVER_ADDRESS", "TOKEN_CREDENTIALS", "OAUTH_RETRIES"
        ]:
            os.environ.pop(var, None)

        AUTH_API_URL = f"{SECURITY_SERVER_ADDRESS}/auth-api/v1"
        API_URL = f"{SECURITY_SERVER_ADDRESS}/api/v1"


        def get_oauth_token(username, password, redirect_uri, client_id, auth_api_url):
            # Step 1: Get temporary token
            login_resp = requests.post(
                f"{auth_api_url}/login",
                json={"username": username, "password": password},
                headers={"Content-Type": "application/json"},
                verify=False
            )
            login_resp.raise_for_status()
            access_token = login_resp.json()["accessToken"]

            # Step 2: Generate code_verifier and code_challenge
            code_verifier = base64.urlsafe_b64encode(os.urandom(64)).decode("utf-8").rstrip("=")
            code_challenge = base64.urlsafe_b64encode(
                hashlib.sha256(code_verifier.encode("utf-8")).digest()
            ).decode("utf-8").rstrip("=")

            # Step 3: Get authorization code
            params = {
                "response_type": "code",
                "scope": "uxp_roles",
                "client_id": client_id,
                "redirect_uri": redirect_uri,
                "code_challenge": code_challenge,
                "code_challenge_method": "S256"
            }

            auth_resp = requests.get(
                f"{auth_api_url}/oauth2/authorize",
                headers={"Authorization": f"Bearer {access_token}"},
                params=params,
                allow_redirects=False,
                verify=False
            )

            auth_data = auth_resp.json()
            authorization_code = auth_data["code"]

            # Step 4: Exchange authorization code for access token
            token_resp = requests.post(
                f"{auth_api_url}/oauth2/token",
                headers={"Content-Type": "application/x-www-form-urlencoded"},
                data={
                    "grant_type": "authorization_code",
                    "client_id": client_id,
                    "redirect_uri": redirect_uri,
                    "code_verifier": code_verifier,
                    "code": authorization_code,
                    "scope": "uxp_roles"
                },
                verify=False
            )
            token_resp.raise_for_status()
            final_access_token = token_resp.json()["access_token"]
            print("✅ Access token acquired:")
            print(final_access_token)
            return final_access_token


        def get_oauth_token_with_retry(username, password, redirect_uri, client_id, auth_api_url, retries):
            last_exception = None
            for attempt in range(1, retries + 1):
                try:
                    print(f"🔁 Authorization attempt {attempt}/{retries}...")
                    return get_oauth_token(username, password, redirect_uri, client_id, auth_api_url)
                except Exception as e:
                    print(f"⚠️ Authorization error: {e}")
                    last_exception = e
                    time.sleep(10)
            raise RuntimeError(f"❌ Failed to acquire token after {retries} attempts") from last_exception


        def login_token(api_auth_token, api_uri, token_number, token_pass):
            token_login_resp = requests.post(
                f"{api_uri}/tokens/{token_number}/login",
                headers={
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {api_auth_token}",
                    "accept": "application/json"
                },
                json={"password": token_pass},
                verify=False
            )

            try:
                result = token_login_resp.json()
            except ValueError:
                result = {"error": "Response is not valid JSON", "text": token_login_resp.text}

            if not token_login_resp.ok:
                error_message = result.get("error", result)
                raise requests.HTTPError(
                    f"Token login failed: {token_login_resp.status_code} - {error_message}",
                    response=token_login_resp
                )

            return result


        def logout_oauth_token(api_auth_token, auth_api_url):
            token_logout_resp = requests.post(
                f"{auth_api_url}/logout",
                headers={
                    "Authorization": f"Bearer {api_auth_token}",
                    "accept": "*/*"
                },
                verify=False
            )

            if not token_logout_resp.ok:
                raise RuntimeError(
                    f"Token logout failed: {token_logout_resp.status_code} - {token_logout_resp.text}"
                )

            return "🔒 API access token logged out successfully"


        # === Main execution ===

        uxp_login_token = ""

        try:
            uxp_login_token = get_oauth_token_with_retry(
                USERNAME, PASSWORD, REDIRECT_URI, CLIENT_ID, AUTH_API_URL, retries=MAX_RETRIES
            )

            # Parse token credentials from environment
            token_map = {}
            for pair in TOKEN_CREDENTIALS.split(","):
                if ":" in pair:
                    token_id, token_pass = pair.split(":", 1)
                    token_map[int(token_id.strip())] = token_pass.strip()

            # Attempt login for each token
            for token_id, token_pass in token_map.items():
                try:
                    result = login_token(uxp_login_token, API_URL, token_id, token_pass)
                    print(f"✅ Token {token_id} login successful:")
                    print(result)
                except Exception as err:
                    print(f"❌ Token {token_id} login failed:")
                    print(err)

        except Exception as err:
            print(f"‼️ Error during token acquisition or login: {err}")
            exit(1)

        if uxp_login_token:
            try:
                logout_result = logout_oauth_token(uxp_login_token, AUTH_API_URL)
                print(logout_result)
            except Exception as err:
                print(f"‼️ Error during logout: {err}")
                exit(2)
        exit(0)
{{- end}}
{{- end}}
